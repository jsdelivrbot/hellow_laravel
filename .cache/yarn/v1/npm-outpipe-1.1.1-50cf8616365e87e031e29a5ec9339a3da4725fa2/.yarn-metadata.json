{
  "manifest": {
    "name": "outpipe",
    "version": "1.1.1",
    "description": "write output to a file through shell commands",
    "main": "index.js",
    "dependencies": {
      "shell-quote": "^1.4.2"
    },
    "devDependencies": {
      "gaze": "^0.5.1",
      "minimist": "^1.1.0",
      "osenv": "^0.1.0",
      "tape": "^3.5.0",
      "xtend": "^4.0.0"
    },
    "scripts": {
      "test": "tape test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/substack/outpipe.git"
    },
    "keywords": [
      "output",
      "file",
      "pipe",
      "shell",
      "exec",
      "spawn",
      "createWriteStream",
      "redirect"
    ],
    "author": {
      "name": "substack"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/substack/outpipe/issues"
    },
    "homepage": "https://github.com/substack/outpipe",
    "_registry": "npm",
    "_loc": "/home/vagrant/.cache/yarn/v1/npm-outpipe-1.1.1-50cf8616365e87e031e29a5ec9339a3da4725fa2/package.json",
    "readmeFilename": "readme.markdown",
    "readme": "# outpipe\n\nwrite output to a file through shell commands\n\n# purpose\n\nSuppose you have a tool like\n[watchify](https://npmjs.com/package/watchify)\nor [factor-bundle](https://npmjs.com/package/factor-bundle)\nthat write to multiple files or write to the same file more than once.\n\nIf you want to pipe the output of these tools to other programs, such as\nminification with the `uglify` command, it's very difficult! You might need to\nuse the tool's API or use a separate command to watch for changes to the output\nfiles. Ick.\n\nYou don't get the elegance of something like:\n\n``` sh\n$ browserify main.js | uglifyjs -cm | gzip > bundle.js.gz\n```\n\nUntil now! With this library and a hypothetical version of watchify, you could\ndo:\n\n``` sh\n$ watchify main.js -dv -o 'uglifyjs -cm | gzip > bundle.js.gz'\n```\n\n# example\n\nHere's a small watcher program that will just copy input files to a destination,\nbut transforms can be applied along the way with shell pipes and redirects.\n\n``` js\nvar outpipe = require('outpipe');\nvar gaze = require('gaze');\nvar fs = require('fs');\n\nvar minimist = require('minimist');\nvar argv = minimist(process.argv.slice(2), {\n    alias: { o: 'output' }\n});\n\nvar file = argv._[0];\ngaze(file, function (err, w) {\n    w.on('changed', read);\n});\nread();\n\nfunction read () {\n    var r = fs.createReadStream(file);\n    r.pipe(outpipe(argv.output));\n}\n```\n\nWe can run the program with a single output file:\n\n``` sh\n$ node watch.js input/x.js -o output/hmm.js\n```\n\nwhich just copies `x.js` to `output/hmm.js` whenever `x.js` changes.\n\nWe could also run a minification step using the `uglify` command:\n\n``` sh\n$ node watch.js input/x.js -o 'uglifyjs -cm > output/wow.js'\n```\n\nor we can just print the size of the minified and gzipped output to stdout:\n\n``` sh\n$ node watch.js input/x.js -o 'uglifyjs -cm | gzip | wc -c'\n123\n```\n\nor we could write that size to a file:\n\n``` sh\n$ node watch.js input/x.js -o 'uglifyjs -cm | gzip | wc -c > size.txt'\n```\n\n# methods\n\n``` js\nvar outpipe = require('outpipe')\n```\n\n## var w = outpipe(cmd, opts={})\n\nReturn a writable stream `w` that will pipe output to the command string `cmd`.\n\nIf `cmd` has no operators (`|` or `>`), it will write to a file.\n\nOtherwise, each command between pipes will be executed and output is written to\na file if `>` is given.\n\n`opts` can be:\n\n* `opts.env` - an object mapping environment variables to their values or a\n`function (key) {}` that returns the values.\n\nstdout and stderr are forwarded to process.stdout and process.stderr if\nunhandled in the command.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install outpipe\n```\n\n# license\n\nMIT\n",
    "licenseText": "This software is released under the MIT license:\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "http://registry.npm.taobao.org/outpipe/download/outpipe-1.1.1.tgz#50cf8616365e87e031e29a5ec9339a3da4725fa2",
    "type": "tarball",
    "reference": "http://registry.npm.taobao.org/outpipe/download/outpipe-1.1.1.tgz",
    "hash": "50cf8616365e87e031e29a5ec9339a3da4725fa2",
    "registry": "npm",
    "packageName": "outpipe"
  },
  "registry": "npm",
  "hash": "50cf8616365e87e031e29a5ec9339a3da4725fa2"
}